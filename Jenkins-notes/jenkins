## Jenkins

CI/CD tool (continuous Integration and Continuous Deployment/delivery)
continuous integration - code will come from git and then we build it.
continuous deployment - the deployment will be done without any manual intervation. completely automated.
continuous delivery - the deployment will be done with manual intervention. manual approval required.
git code -> checkout -> build -> push -> deploy

jenkins requirment:- at least t2.medium
- It is made from java therefore it requires java to run.
https://www.jenkins.io/doc/book/installing/linux/#fedora --> aws installation
- we have 2 types of pipeline - declarative and scripted
- we use declarative because it is simple.
- there can be multi stage pipeline.
- no 2 stage can have same name.
- jenkins works on master and node/slave/worker


sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo dnf upgrade
# Add required dependencies for the jenkins package
sudo dnf install fontconfig java-17-amazon-corretto -y
sudo dnf install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable --now jenkins


adding parameter string
adding variables in ecr tag time stamp - plugin name - build timestamp

# Master Slave method
 make 2 instances 1 master and 2nd slave
 install jenkins on master and only java-17 on slave as we will require java to run jenkins on slave.
 in master go in jenkins then go to manage jenkins and go to nodes and click new node and fill info.
 launch method - launch agent vai ssh
 label - slave # imp as we will use this name while specifying agent
 host - slave IP
 credentials - add new credentials and fill info.
  ID - slave key # whatever we want to give
  Username - ec2-user # the OS we are using will have a username that we have to specify eg. in ubuntu - 'ubuntu',in amazonlinux - 'ec2-user', etc.
  Password - ec2-user private key # the key we have created for ec2-user
 verification strategy - non veryfing V. S.

 # Accessing slave from master
 we can also use "ssh-keygen" to generate key and then use that key to connect to slave from master.
 for that we have to paste the new-key.pub in the 'authorized_keys' file pressent in .ssh folder of slave instance. And then when we will try to login in slave from master we will be able to do it.

we can also create a slave directly from jenkins using cloud -> EC2 instance plugin.

#Q. How can we upgrade jenkins version?
Ans. we can use blue-green deploymnet.

# Github Webhooks
- We can use webhooks to trigger jenkins pipeline i.e. when we make any commit in the git repo automatically the pipeline will be trigered.
- IMP --> install git in the master to use webhooks.
- we cando this by :
  1) go to git repo we want to automate.
  2) go to settings.
  3) go to webhooks.
  4) add new webhook.
    in webhook add the site of our jenkins server. eg. http://server_ip:8080/github-webhook/
  5) check if the webhook is sending data or not by checking 'Recent deliveries' in webhook.  


# Jenkins Shared Libraries
- 
- we can create a shared library in jenkins which can be used by all the pipelines.
- We create a repo in git and define functions according to our need and these functions then can be used in any pipeline created in jenkins.
- The file in the repo should be name "file_name.groovy" to make it useful in jenkins.
- Procedure to create a shared library in jenkins is as follows :
  1) go to jenkins -> manage jenkins -> In configure system click 'System'
  2) In system go to 'Global Trusted Pipeline Libraries' and click 'add'
  3) name -> any name
     default Version -> give our branch name
     retrival method -> modern SCM
      In SCM -> Git
      Repository URL -> our repo url
      credential -> if repo is private add git cred. otherwise leave it blank

# IMP
** when we creat a new repo from where we are going to use .groovy files we have to first create a "vars/" folder and inside it we must make our .groovy files otherwise we will get errors.
** To add the shared library in pipeline we write "@Library("Shared") _" at the start of the pipeline.
** the shared library .groovy file should not be named "file-name.groovy" It shoud be "file_name.groovy"


# Pipeline Script from SCM
- We can also use our jenkins pipeline directly from the git using 'Pipeline Script from SCM'.
- We can do this by :
  1) first add the pipeline code to the git repo.
  2) the go to configure of pipeline then go to 'Pipeline' and select 'Pipeline Script from SCM' and specify all details.

# Sonar Qube (not used often)
command to run sonarqube as a container --> sudo docker run -d -p 9000:9000 -e SONARQUBE_WEB_JVM_OPTS="-Dsonar.property=value" sonarqube OR sudo docker run -d -P sonarqube
- it is a code coverage tool. it is not a test tool.
- it is used to measure the quality of the code.
- works on port 9000.
- basic requirment --> CPU - 2 , memory - 4GB
- 
 plugin - 

# Command to run Jenkins as a docker container
- install docker and enable it first
- sudo docker run -d --privileged -P --user root  -v /mnt:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins/jenkins
- To see the jenkins password go to "sudo docker logs <jenkins_container_id>"
- If we want to run our jenkins file on jenkins container it should have:-
 1) their shoud be no sudo in command as the container does not have sudo.
 2) awscli should be installed in the container.
 3) yum will not work in the container as many docker images have ubuntu as base image so use apt to install.
- If we are using MASTER SLAVE and running the pipeline on slave instead of giving IAM user credential 
  we just have to give appropriate permissions to the slave user to run the pipeline.


# To integrate sonar and jenkins
first install aws credentails plugin.
Then create a user name and give appropriate permissions to it. in our case we gave ECR permissions.
Then create the security credentials and add the credentials in jenkins.
Then create a new project in sonar and create it locally and choose maven at the end.
Create the token and add the received command in the groovy file.(jenkins-2) 

We cannot add role to a container therefore we have to add credentials to the container.
For that we can make a IAM user with appropriate permission and add its credential to the container in pilepline
or jenkins.

#Q. How to pass a variable in a dockerfile


Artifactory are places where we store artifact
Nexus and 




# Task
 while making the pipeline of online bookstore edit its docker file so that it saves the artficat created in mvn clean package
 in a S3 bucket.
 --> refer dockerfile