To undertand shell scripting we must know linux architecture.

# linux architecture
 to keep the linux architecture in mind we must ASK as:

 A --> applications

 S --> shell

 K --> kernal
 
 Hardware --> the hardware components

 The kernal is written in C language. It is through kernal we can talk to the hardware,
 Through shell we can talk to the kernal. It makes easier for us to talk to the hardware.

# Little History
 Linux was invinted by Linus Torvalds in 1991.  

 Linus Torvals and Steve Bourne are the creaters of the sh shell.
  /bin/sh --> this is the place where the sh shell is located in linux.

  After improving sh shell more and more it became bash shell.
  bash --> Bourne Again Shell
  /bin/bash --> this is the place where the bash shell is located in linux.

# Requirments for writing shell script:
 Linux system
 bash shell or which ever shell we are using
 text editor

- Shell script file ends with '.sh'. (eg. myscript.sh)
- when we write a shell script we mention which shell we are writing our script in.
  It is called 'shebang'.
  eg. #!/bin/bash --> we are specifying bashshell.
      hear "#" means that the this line should not be used in the script.
- The shell script file that we wrote should have 'executable' permission.(we can do that using chmod command)
- The file after giving the executable permission will appear green in colour.
- We can run the file using './(file_name)' command and also use 'bash file_name' command to run the file.
- '#' can be used to comment words or sentences in the script. Those words or sentences will not be executed.
- We can use << any_word      any_word to write multi line comments.
  eg. << comment 
       Anything written
       hear will not
       be executed
       comment

# Variables
- We can assign values to variables using '=' operator inside a script.
 (variable_name) = 'string/number/etc.'
  eg. name="John" --> name is assigned a string called 'Jhon'
- If we want to use the defined variable we use '$' operator before the variable name.
  eg. echo "My name is $name"
    output --> My name is John
- We can also use commands as variable using '$(command)'.
  eg. echo "My name is $name and the day and date is $(date)"
- We can also take input variables from user using 'read' command.
  read variable_name
  eg. echo "Enter username:"
     read username
     echo "Hello $username"
     This will stop after first line and take the input first and then prit the second line.
- We can also give prompt along while talking the input using 'read -p' command.
 eg. read -p "Enter username: " username
     echo "Hello $username"

The things we learned above can help us to create a new user while talking input from user.
    #!/bin/bash
    read -p "Enter the new user name: " username
    sudo adduser -m $username
    echo "added new user $username"
we can check if the new user is created or not by looking at the bottom of /etc/passwd file.

# Arguments
- We can pass arguments to the script while running the script.
 eg. ./myscript.sh arg1 arg2 arg3
- This helps us in things like when we want to run the same script with different inputs.
- Like while creating multiple users we can pass the username as argument.

# Conditional Statements
- We can also use 'if' and 'elif' statements in shell script to give conditions.
- 'if' condition syntax
 if [[ condition ]];
 then
  ...
  ...
 elif [[ condition ]];
 then
  ...
  ... 
 else
  ...
  ...
 fi

- eg.
 #!/bin/bash
 echo -p "what is your name: " correctname
 echo -p "are you a creator: " creator
 if [[ $correctname = "master" ]];
 then
  echo "You are the correct master"
 elif [[ $creator = "yes" ]];
 then
  echo "You are also the master" 
 else
  echo "You are a slave"
 fi

# Loops
