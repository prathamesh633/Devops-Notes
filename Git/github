# Github
- Git is a distributed version control system used to track changes in source code during software development.

- In Git, there are THREE main stages that a file can be in during the version control process:
  1. Working Directory (or Working Tree)
     This is where you make changes to your files.
     Files in this stage are either:
     Untracked (new files Git doesn't yet know about)
     Modified (tracked files that have been changed since the last commit)
  
  2. Staging Area (or Index)
     This is where you prepare changes to be committed.
     When you run git add, you're moving changes from the Working Directory to the Staging Area.
     It tells Git, “I want to include these changes in the next commit.”
  
  3. Repository (or Committed Area)
     This is the actual Git database.
     Once you run git commit, changes in the Staging Area are saved to the repository's history.


# Git Commands
1. git clone <repository-url> -->	Creates a local copy of a remote repository on your machine.

2. git add <file>	--> Stages changes in a file, preparing it to be committed.

3. git commit -m "message" -->	Saves the staged changes to the local repository with a descriptive message.
 (we have to write a message to  commit changes)

4. git push origin <branch> -->	Uploads local commits to the remote repository (e.g., GitHub).

5. git pull --> It pulls the latest changes from the remote repository and merges them into the current branch.

6. git init --> The git init command creates a new Git repository. It can be used to convert an existing, unversioned project
   to a Git repository or initialize a new, empty repository. 

7. git log --> Displays a list of all commits made to the repository.

8. git merge --> it merge will combine multiple sequences of commits into one unified history.
   Say we have a new branch feature that is based off the main branch. We now want to merge this feature branch into main.
   Invoking this command will merge the specified branch feature into the current branch, we'll assume main. Git will determine the merge algorithm automatically.
   A---B---C  main
     \
      D---E---F  feature
    (After the merge)
   A---B---C  main
     \     \
      D---E---F---M  feature (merge commit)

9. Git rebase --> git rebase is a Git command that lets you move your changes to a new base, usually to make your project history cleaner.
   Let’s say, You branched off main - You made 3 commits on your branch (feature) - Meanwhile, main also got some new commits.
   Rebase takes your 3 commits and moves them to the tip of main — as if you had made them after the new main changes.
   A---B---C main
     \
      D---E---F feature
  
   A---B---C---D'---E'---F' feature
             ↑ rebased

10. git config --> is a command in Git used to set, view, and manage configuration settings that control Git’s behavior and identity—like your name, 
    email, merge tool, editor, credentials, and more. Git uses your user.name and user.email to track who made each commit.


# Github Webhooks
- We can use webhooks to trigger jenkins pipeline i.e. when we make any commit in the git repo automatically the pipeline will be trigered.
- we cando this by :
  1) go to git repo we want to automate.
  2) go to settings.
  3) go to webhooks.
  4) add new webhook.
    in webhook add the site of our jenkins server. eg. http://server_ip:8080/github-webhook/
  5) check if the webhook is sending data or not by checking 'Recent deliveries' in webhook.


# GitHub Permission Restriction
- We can use "branch protection rules" to control access to the branches of our repositories.
- Steps to enable "branch protection rules":
  1. Click on Settings --> Branches.
  2. Under Branch protection rules, click Add rule.
  3. Type the name of the branch you want to protect (e.g., main).
  4. Enable options such as: 
      Require pull request reviews before merging
      Require status checks to pass before merging
      Require signed commits
      Restrict who can push to matching branches
  5. Under Restrict who can push to matching branches, select specific teams or people.