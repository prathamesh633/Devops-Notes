# A container crashes every time you start it. How would you debug?
 1. Check Container Logs
 Use `docker logs <container_name>`
 This might show an error like "Missing config file" or "Port already in use".

2. Instead of letting the container crash, run it interactively to explore inside.
`docker run -it --entrypoint /bin/sh myimage`
This bypasses the default entrypoint, letting me inspect the container filesystem, environment variables, and configs manually.

3. Check the Dockerfile & ENTRYPOINT/CMD
Look for errors in the CMD or ENTRYPOINT in the Dockerfile.
For example, if it starts a script that doesnâ€™t exist, the container will exit immediately.

4. Check Exit Code
Run docker ps -a to get the exit code of the container.
`docker inspect <container_name> --format='{{.State.ExitCode}}'`
Exit code 0 = success
Exit code 1 = general failure
Exit code 137 = killed (maybe out-of-memory)
Exit code 139 = segmentation fault


# You updated a Dockerfile but changes are not reflecting. What could be wrong?


# How do you clean up unused containers, images, and volumes?


# You want to run a container in the background and also see its logs. How do you do that?


# You have multiple applications that need to communicate with each other. How do you set that up using Docker Compose?