 reference 
 - https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
 - https://eksctl.io/installation/
 - https://kubernetes.io/docs/reference/kubectl/quick-reference/

## KUBERNETES ARCHITECTURE
host / node / VM / EC2 instance all are called as 'Node' in kubernetes.
in AWS kubernetes service is called EKS(Elastic Kubernetes Service).

#Q. what is Kuberentes?

- an open-source container orchestration system for automating the deployment, scaling, and management of container
- it was originally designed by google, and is now maintained by the cloud native computing foundation
- it allows for the deployment of applications and services in a scalable and highly available manner
- it provides a lot of features such as self-healing, load balancing, and resource management
- it is a hybrid cloud platform that can run on-premises and in the cloud

## Kubernetes Architrcture
 # components:-
  Control Plane/Master Node
   Kube API server
   Etcd
   Scheduler
   Controller Manager
  Worker Node
   Kubelet
   Kube Proxy
   Container runtime
   Pods

 # Master Node (Control Plane)
 The brain of Kubernetes, managing the entire cluster.
 Key Components:-
  1. API Server
     - Acts as the front door for the cluster.
     - Processes commands from users (kubectl) or other tools.
     - Communicates with all other components.
     - Ensures security and authentication.
    
  2. Scheduler
     - Decides which worker node will run a new pod.
     - Matches resources (CPU, memory) with pod requirements.
     - Ensures workload is evenly distributed.
    
  3. Controller Manager
     - Monitors the cluster to ensure the desired state is met.
     - Restarts pods if they crash.
     - Handles tasks like scaling and maintaining services.
    
  4. etcd
     - A key-value store that holds all cluster data.
     - Keeps track of the cluster’s state and configuration.
     - Highly available and distributed.
  
 # Worker Node
 Where your application runs.
 Key Components:-
  1. Kubelet
   - The worker node’s "agent."
   - Ensures containers are running as per instructions from the master node.
   - Communicates with the API Server.
  
  2. Kube-Proxy
   - Manages network rules and routes traffic to the right pod.
   - Ensures pods within the cluster can communicate.
   - Handles services like load balancing.

  3. Container Runtime
   - Runs containers on the worker node.
   - Examples: Docker, containerd, CRI-O.
   - Executes, stops, and monitors the containers.  

  4. Pod
   - A pod is the basic building block in Kubernetes.
   - Pods are temporary by design. Kubernetes can destroy and recreate pods to maintain the desired state or in response to failures.
   - Containers in the same pod share resources such as networking and storage.


## Steps to install kubernetes

# To install 'kubectl'
curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.6/2024-11-15/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

# To install 'eksctl'
# for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
ARCH=amd64
PLATFORM=$(uname -s)_$ARCH
curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
# (Optional) Verify checksum
curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
sudo mv /tmp/eksctl /usr/local/bin


## Commands
  # To run a 'cluster' from CLI
   ** Give a IAM role of admin to the ec2 instance to create a cluster from CLI.
   eksctl create cluster --name <our_name> --node-type <node/instance_type> --nodes <no._of_nodes> --region=<region>
   eg. eksctl create cluster --name irondome --node-type t2.medium --nodes 2 --region=ap-south-1
  
  # To delete a 'cluster' from CLI
   eksctl delete cluster --name <our_name> --region=<region>
   eg. eksctl delete cluster --name irondome --region=ap-south-1


  kubectl get pods -A --> to see all pods 
  kubectl get nodes --> to get nodes
  vim pod.yaml --> pod manifest file
  kubectl apply -f pod.yaml --> to apply manifest
  kubectl get pod/po --> small commands to see pods
  kubectl describe pod/po <pod_name> --> to describe pods nginx


## Manifest files
 A manifest file is a generalized name for any kubernetes configuration file that defines the configuration of
 various K8s components.
 It can be written in YAML or JSON format.

# Pod demo Manifest File: 
pod manifest file name --> pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80


# ReplicaSet (RS)
 It maintains a stable set of replicas (pods) running at any given time. Even if we delete a pod of the replicaset it will 
 automatically make a new pod. 
 Uses label selectors to identify which pods it manages.

# demo replicaset file:-
filename --> replicaset.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx
  labels:
    app: nginx-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-rs
  template:
    metadata:
      labels:
        app: nginx-rs
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

command to list replicaset --> kubectl get rs
** command to scale replicaset --> kubectl scale --replicas=(no._of_pods) rs/(RS_name) **     


# Deployment
 Deployment is a higher-level concept that manages ReplicaSets. 
 As a user we create a deployment set that creates the replicasets and manages it.
 It can be used to manage multiple ReplicaSets at the same time.
 If we want to update a the pod we can do that easily without any downtime using deployment. As it will update one pod and direct its
 traffic to other pods or can create new pod. It will do this for each pod to avoid downtime.

 We can make changes to our go back to previous changes in deployment.
 command --> kubectl rollout undo deployment/(deployment_name)

# demo deployment file:-
 filename --> deployment.yaml
 apiVersion: apps/v1
 kind: Deployment
 metadata:
  name: nginx-deployment
  labels:
    app: nginx
 spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

command to list deployments --> kubectl get deploy/deployment/deployments

# Hirerchy--> deployment -> ReplicaSet -> pod (deploy creates replicaset which then creates pods)       
kubctl api-resources --> to check all the api resources available in the cluster.