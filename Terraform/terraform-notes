# Terraform
- We use Terraform to manage our IAC(Infrastructure As Code).
- It is used to create resources on cloud.
- We cannot make it on premises as it is code.
- terraform file name --> file_name.tf
  main.tf --> 
  provider.tf. --> cloud provider configuration file to define aur service provider.
  var.tf or variable.tf --> if our terraform file needs some variables we define them here. 

# Installation 
- site --> https://developer.hashicorp.com/terraform/install#linux
 OR
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

# Steps to initialize the code of terraform
- step 1: terraform init 
  initialises the terraform process.
  provider are downloaded and terraform.lock.hcl created.

- step 2: terraform plan 
  will show the plan od infrastructure.
  always check if the things we mentioned are properly mentioned or not.

- step 3: terraform apply
  will apply our configuration file to the cloud provider.
  
  we can apply '--auto-approve' to skip the confirmation prompt.

- To delete
 terraform destroy --> deletes the infrastructure created by terraform.

# functions
 length() 
 element() 
for_each --> loop

# Modules
- We can reuse our code with the help of modules.
- The reusablity can be with minimum changes.
- Also we do not pass hard coded values in the EC2, VPC, S3 etc. main.tf file we do that in modules.
 It helps us to reuse code just by changing values in the modules.

- ingress --> inbound of security group
- egress --> outbound of security group
- Dynamic ingress --> we mention the ports in module and then we use for_each loop to create multiple ingress rules.
 (ingress rules -- inbound security group ports)
- Data block --> we use data block to get the data from the cloud provider.



task:
make the module for --> iam_user, group, policy, role